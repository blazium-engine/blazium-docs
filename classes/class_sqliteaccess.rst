:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/blazium-engine/blazium/tree/4.3/doc/tools/make_rst.py.
.. XML source: https://github.com/blazium-engine/blazium/tree/4.3/modules/sqlite/doc_classes/SQLiteAccess.xml.

.. _class_SQLiteAccess:

SQLiteAccess
============

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Wrapper class for SQLite databases.

.. rst-class:: classref-introduction-group

Description
-----------

A wrapper class that lets you perform SQL statements on an SQLite database file.

For queries that involve arbitrary user input, you should use methods that end in ``*_with_args``, as these protect against SQL injection.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`               | :ref:`backup<class_SQLiteAccess_method_backup>`\ (\ path\: :ref:`String<class_String>`\ )                                                                                                      |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`               | :ref:`close<class_SQLiteAccess_method_close>`\ (\ )                                                                                                                                            |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`SQLiteQuery<class_SQLiteQuery>` | :ref:`create_query<class_SQLiteAccess_method_create_query>`\ (\ statement\: :ref:`String<class_String>`, arguments\: :ref:`Array<class_Array>` = []\ )                                         |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                 | :ref:`get_last_error_code<class_SQLiteAccess_method_get_last_error_code>`\ (\ ) |const|                                                                                                        |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`           | :ref:`get_last_error_message<class_SQLiteAccess_method_get_last_error_message>`\ (\ ) |const|                                                                                                  |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`               | :ref:`open<class_SQLiteAccess_method_open>`\ (\ database\: :ref:`String<class_String>`\ )                                                                                                      |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`               | :ref:`open_buffered<class_SQLiteAccess_method_open_buffered>`\ (\ path\: :ref:`String<class_String>`, buffers\: :ref:`PackedByteArray<class_PackedByteArray>`, size\: :ref:`int<class_int>`\ ) |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`               | :ref:`open_in_memory<class_SQLiteAccess_method_open_in_memory>`\ (\ )                                                                                                                          |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_SQLiteAccess_method_backup:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **backup**\ (\ path\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_SQLiteAccess_method_backup>`

Creates a backup of the database at the given path.

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_close:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **close**\ (\ ) :ref:`ðŸ”—<class_SQLiteAccess_method_close>`

Closes the database handle.

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_create_query:

.. rst-class:: classref-method

:ref:`SQLiteQuery<class_SQLiteQuery>` **create_query**\ (\ statement\: :ref:`String<class_String>`, arguments\: :ref:`Array<class_Array>` = []\ ) :ref:`ðŸ”—<class_SQLiteAccess_method_create_query>`

Creates a new query object.

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_get_last_error_code:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_last_error_code**\ (\ ) |const| :ref:`ðŸ”—<class_SQLiteAccess_method_get_last_error_code>`

Gets the last error code.

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_get_last_error_message:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_last_error_message**\ (\ ) |const| :ref:`ðŸ”—<class_SQLiteAccess_method_get_last_error_message>`

Gets the last error message.

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_open:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **open**\ (\ database\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_SQLiteAccess_method_open>`

Opens the database file at the given path. Returns ``true`` if the database was successfully opened, ``false`` otherwise.

If the path starts with "res://", it will use :ref:`open_buffered<class_SQLiteAccess_method_open_buffered>` implicitly.

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_open_buffered:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **open_buffered**\ (\ path\: :ref:`String<class_String>`, buffers\: :ref:`PackedByteArray<class_PackedByteArray>`, size\: :ref:`int<class_int>`\ ) :ref:`ðŸ”—<class_SQLiteAccess_method_open_buffered>`

Opens a temporary database with the data in ``buffer``. Used for opening databases stored in res:// or compressed databases. Returns ``true`` if the database was opened successfully.

Can be written to, but the changes are NOT saved!

.. rst-class:: classref-item-separator

----

.. _class_SQLiteAccess_method_open_in_memory:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **open_in_memory**\ (\ ) :ref:`ðŸ”—<class_SQLiteAccess_method_open_in_memory>`

Opens an in-memory database.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
