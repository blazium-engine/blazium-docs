:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/blazium-engine/blazium/tree/4.3/doc/tools/make_rst.py.
.. XML source: https://github.com/blazium-engine/blazium/tree/4.3/modules/blazium_sdk/doc_classes/YoutubePlayablesClient.xml.

.. _class_YoutubePlayablesClient:

YoutubePlayablesClient
======================

**Inherits:** :ref:`ThirdPartyClient<class_ThirdPartyClient>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Node for using the Youtube Playables SDK.

.. rst-class:: classref-introduction-group

Description
-----------

Node for using the Youtube Playables SDK.

Implementation based on the official Youtube Playables SDK. Official documentation for this service on `developers.google.com/youtube/gaming/playables/reference/sdk <https://developers.google.com/youtube/gaming/playables/reference/sdk>`__.

You can test your game on `developers.google.com/youtube/gaming/playables/test_suite <https://developers.google.com/youtube/gaming/playables/test_suite>`__.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` | :ref:`get_language<class_YoutubePlayablesClient_method_get_language>`\ (\ )                                               |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                                     | :ref:`get_sdk_version<class_YoutubePlayablesClient_method_get_sdk_version>`\ (\ )                                         |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                         | :ref:`is_audio_enabled<class_YoutubePlayablesClient_method_is_audio_enabled>`\ (\ )                                       |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                         | :ref:`is_youtube_environment<class_YoutubePlayablesClient_method_is_youtube_environment>`\ (\ )                           |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` | :ref:`load_data<class_YoutubePlayablesClient_method_load_data>`\ (\ )                                                     |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | |void|                                                          | :ref:`log_error<class_YoutubePlayablesClient_method_log_error>`\ (\ )                                                     |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | |void|                                                          | :ref:`log_warning<class_YoutubePlayablesClient_method_log_warning>`\ (\ )                                                 |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` | :ref:`open_yt_content<class_YoutubePlayablesClient_method_open_yt_content>`\ (\ video_id\: :ref:`String<class_String>`\ ) |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` | :ref:`save_data<class_YoutubePlayablesClient_method_save_data>`\ (\ data\: :ref:`String<class_String>`\ )                 |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+
   | :ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` | :ref:`send_score<class_YoutubePlayablesClient_method_send_score>`\ (\ value\: :ref:`int<class_int>`\ )                    |
   +-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_YoutubePlayablesClient_signal_audio_enabled_change:

.. rst-class:: classref-signal

**audio_enabled_change**\ (\ enabled\: :ref:`bool<class_bool>`\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_signal_audio_enabled_change>`

Emitted when the audio settings change event is fired from YouTube.

\ `Mute toggle requirements. <https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#5_mute_toggle>`__

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_signal_pause:

.. rst-class:: classref-signal

**pause**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_signal_pause>`

Emitted when a pause game event is fired from YouTube.

When a pause game event is fired from YouTube, :ref:`audio_enabled_change<class_YoutubePlayablesClient_signal_audio_enabled_change>` is emitted.

\ **Note:** You have a short window to save any state before your game gets evicted.

\ `Pause and resume requirements. <https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#6_pause_and_resume>`__

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_signal_resume:

.. rst-class:: classref-signal

**resume**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_signal_resume>`

Emitted when a resume game event is fired from YouTube.

When a resume game event is fired from YouTube, :ref:`audio_enabled_change<class_YoutubePlayablesClient_signal_audio_enabled_change>` is emitted.

\ `Pause and resume requirements. <https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#6_pause_and_resume>`__

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_YoutubePlayablesClient_method_get_language:

.. rst-class:: classref-method

:ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` **get_language**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_get_language>`

Returns the `BCP-47 <https://www.rfc-editor.org/info/bcp47>`__ language tag for the user's language set in YouTube.

\ **Note:** this may be different than the system or browser language settings but should always match the language used in YouTube.

Returns an empty :ref:`String<class_String>` if called outside the Youtube Playables environment.

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_get_sdk_version:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_sdk_version**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_get_sdk_version>`

The YouTube Playables SDK version.

Returns an empty :ref:`String<class_String>` if called outside the Youtube Playables environment.

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_is_audio_enabled:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_audio_enabled**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_is_audio_enabled>`

Returns whether the game audio is enabled in the YouTube settings.

Returns ``true`` if called outside the Youtube Playables environment.

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_is_youtube_environment:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_youtube_environment**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_is_youtube_environment>`

Whether or not the game is running as a playable.


.. tabs::

 .. code-tab:: gdscript

    if is_youtube_environment():
        print("Youtube Playables SDK version is " + get_sdk_version())



.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_load_data:

.. rst-class:: classref-method

:ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` **load_data**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_load_data>`

Loads game data from the YouTube cloud in the form of a serialized string. This API is usually called before the game loads to resume the game state.


.. tabs::

 .. code-tab:: gdscript

    var result: YoutubePlayablesResponse = await load_data().finished
    if result.has_error():
        push_error(result.error)
        log_error()
    else:
        var data: Dictionary = JSON.parse_string(result.data)
        print("Player is at level %d." % data["player_level"])



\ **Note:** Signed-out players are not supported. The :ref:`YoutubePlayablesResult.data<class_YoutubePlayablesResult_property_data>` will be empty.

\ `Cloud saves requirements. <https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#4_cloud_saves>`__

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_log_error:

.. rst-class:: classref-method

|void| **log_error**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_log_error>`

Logs an error to YouTube.

\ **Note:** This API is best-effort and rate-limited which can result in data loss.

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_log_warning:

.. rst-class:: classref-method

|void| **log_warning**\ (\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_log_warning>`

Logs a warning to YouTube.

\ **Note:** This API is best-effort and rate-limited which can result in data loss.

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_open_yt_content:

.. rst-class:: classref-method

:ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` **open_yt_content**\ (\ video_id\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_open_yt_content>`

Open a YouTube video given a valid ``video_id``.

This will open the video in a new tab on web and in the miniplayer on mobile.

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_save_data:

.. rst-class:: classref-method

:ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` **save_data**\ (\ data\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_save_data>`

Saves game data to the YouTube cloud in the form of a serialized string.

It is recommended to save your data immediately after important milestones.


.. tabs::

 .. code-tab:: gdscript

    var data: Dictionary = {"player_level": 42}
    var result: YoutubePlayablesResult = await save_data(JSON.stringify(data)).finished
    if result.has_error():
        push_error(result.error)
        log_error()



\ **Note:** Signed-out players are not supported. :ref:`YoutubePlayablesResponse.finished<class_YoutubePlayablesResponse_signal_finished>` returns without errors but the data is not be saved.

\ `Cloud saves requirements. <https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#4_cloud_saves>`__

.. rst-class:: classref-item-separator

----

.. _class_YoutubePlayablesClient_method_send_score:

.. rst-class:: classref-method

:ref:`YoutubePlayablesResponse<class_YoutubePlayablesResponse>` **send_score**\ (\ value\: :ref:`int<class_int>`\ ) :ref:`ðŸ”—<class_YoutubePlayablesClient_method_send_score>`

Sends the user's best score to YouTube.

The score should represent one dimension of progress within the game. If there are multiple dimensions, the developer must choose one dimension to be consistent. Scores will be sorted and the highest score will be displayed in YouTube UI so any in-game high score UI should align with what is being sent through this API.

\ `User scores requirements. <https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#3_user_scores>`__

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
