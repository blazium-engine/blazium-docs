:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/blazium-engine/blazium/tree/4.3/doc/tools/make_rst.py.
.. XML source: https://github.com/blazium-engine/blazium/tree/4.3/doc/classes/ThemeDB.xml.

.. _class_ThemeDB:

ThemeDB
=======

**Inherits:** :ref:`Object<class_Object>`

A singleton that provides access to static information about :ref:`Theme<class_Theme>` resources used by the engine and by your project.

.. rst-class:: classref-introduction-group

Description
-----------

This singleton provides access to static information about :ref:`Theme<class_Theme>` resources used by the engine and by your projects. You can fetch the default engine theme, as well as your project configured theme.

\ **ThemeDB** also contains fallback values for theme properties.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-----------------------------------+------------------------------------------------------------------------+---------+
   | :ref:`float<class_float>`         | :ref:`fallback_base_scale<class_ThemeDB_property_fallback_base_scale>` | ``1.0`` |
   +-----------------------------------+------------------------------------------------------------------------+---------+
   | :ref:`Font<class_Font>`           | :ref:`fallback_font<class_ThemeDB_property_fallback_font>`             |         |
   +-----------------------------------+------------------------------------------------------------------------+---------+
   | :ref:`int<class_int>`             | :ref:`fallback_font_size<class_ThemeDB_property_fallback_font_size>`   | ``16``  |
   +-----------------------------------+------------------------------------------------------------------------+---------+
   | :ref:`Texture2D<class_Texture2D>` | :ref:`fallback_icon<class_ThemeDB_property_fallback_icon>`             |         |
   +-----------------------------------+------------------------------------------------------------------------+---------+
   | :ref:`StyleBox<class_StyleBox>`   | :ref:`fallback_stylebox<class_ThemeDB_property_fallback_stylebox>`     |         |
   +-----------------------------------+------------------------------------------------------------------------+---------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`add_user_icon<class_ThemeDB_method_add_user_icon>`\ (\ icon_name\: :ref:`String<class_String>`, icon_source\: :ref:`String<class_String>`\ ) |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                                            | :ref:`freeze_default_theme<class_ThemeDB_method_freeze_default_theme>`\ (\ )                                                                       |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Theme<class_Theme>`                         | :ref:`get_default_theme<class_ThemeDB_method_get_default_theme>`\ (\ )                                                                             |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`ImageTexture<class_ImageTexture>`           | :ref:`get_icon<class_ThemeDB_method_get_icon>`\ (\ icon_name\: :ref:`String<class_String>`\ )                                                      |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_icon_list<class_ThemeDB_method_get_icon_list>`\ (\ )                                                                                     |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Theme<class_Theme>`                         | :ref:`get_project_theme<class_ThemeDB_method_get_project_theme>`\ (\ )                                                                             |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`ImageTexture<class_ImageTexture>`           | :ref:`get_user_icon<class_ThemeDB_method_get_user_icon>`\ (\ icon_name\: :ref:`String<class_String>`\ )                                            |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_user_icon_list<class_ThemeDB_method_get_user_icon_list>`\ (\ )                                                                           |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`has_icon<class_ThemeDB_method_has_icon>`\ (\ icon_name\: :ref:`String<class_String>`\ )                                                      |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`has_user_icon<class_ThemeDB_method_has_user_icon>`\ (\ icon_name\: :ref:`String<class_String>`\ )                                            |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_default_theme_frozen<class_ThemeDB_method_is_default_theme_frozen>`\ (\ ) |const|                                                         |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`remove_user_icon<class_ThemeDB_method_remove_user_icon>`\ (\ icon_name\: :ref:`String<class_String>`\ )                                      |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                                            | :ref:`unfreeze_default_theme<class_ThemeDB_method_unfreeze_default_theme>`\ (\ )                                                                   |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_ThemeDB_signal_border_padding_changed:

.. rst-class:: classref-signal

**border_padding_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_border_padding_changed>`

Emits when the default theme padding or border width are changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Used internally to update the internal margin of the nodes that has a focus :ref:`StyleBox<class_StyleBox>`.

Use ``ThemeDB.get_default_theme().get_constant("border_padding", "Constants")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_border_width_changed:

.. rst-class:: classref-signal

**border_width_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_border_width_changed>`

Emits when the default theme border width is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_constant("border_width", "Constants")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_colors_changed:

.. rst-class:: classref-signal

**colors_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_colors_changed>`

Emits when any of the theme colors are changed from the :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_color("base_color", "Colors")`` to get the changed value.

Valid options are base_color, accent_color, accent_color2, bg_color, bg_color2, normal_color, pressed_color, hover_color, disabled_color, mono_color, font_color, and font_outline_color.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_corner_radius_changed:

.. rst-class:: classref-signal

**corner_radius_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_corner_radius_changed>`

Emits when the default theme corner radius is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_constant("corner_radius", "Constants")`` to get the changed value.

\ **Note:** To get the corner radius used for focus style, use ``ThemeDB.get_default_theme().get_constant("focus_corners", "Constants")``.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_fallback_changed:

.. rst-class:: classref-signal

**fallback_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_fallback_changed>`

Emitted when one of the fallback values had been changed. Use it to refresh the look of controls that may rely on the fallback theme items.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_font_changed:

.. rst-class:: classref-signal

**font_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_font_changed>`

Emits when the project font is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_default_font()`` to get the new font, if the new font is null, the fallback font is used instead.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_font_color_changed:

.. rst-class:: classref-signal

**font_color_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_font_color_changed>`

Emits when the default theme font color is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_color("font_color", "Colors")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_font_outline_color_changed:

.. rst-class:: classref-signal

**font_outline_color_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_font_outline_color_changed>`

Emits when the default theme font outline color is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_color("font_outline_color", "Colors")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_font_outline_size_changed:

.. rst-class:: classref-signal

**font_outline_size_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_font_outline_size_changed>`

Emits when the default theme font outline size is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_constant("font_outline_size", "Constants")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_font_size_changed:

.. rst-class:: classref-signal

**font_size_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_font_size_changed>`

Emits when the default theme font size is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_default_font_size()`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_icons_changed:

.. rst-class:: classref-signal

**icons_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_icons_changed>`

Emits when the theme icons scale or colors changes.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_margin_changed:

.. rst-class:: classref-signal

**margin_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_margin_changed>`

Emits when the default theme margin is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

\ **Note:** The margin is used for internal separation and not the content margins which uses padding, check :ref:`padding_changed<class_ThemeDB_signal_padding_changed>`.

Use ``ThemeDB.get_default_theme().get_constant("margin", "Constants")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_padding_changed:

.. rst-class:: classref-signal

**padding_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_padding_changed>`

Emits when the default theme padding is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_constant("padding", "Constants")`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_scale_changed:

.. rst-class:: classref-signal

**scale_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_scale_changed>`

Emits when the default theme scale is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

Use ``ThemeDB.get_default_theme().get_default_base_scale()`` to get the changed value.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_signal_theme_changed:

.. rst-class:: classref-signal

**theme_changed**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_signal_theme_changed>`

Emits when any property that has a path starting with "gui/theme/" is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_ThemeDB_property_fallback_base_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **fallback_base_scale** = ``1.0`` :ref:`ðŸ”—<class_ThemeDB_property_fallback_base_scale>`

.. rst-class:: classref-property-setget

- |void| **set_fallback_base_scale**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_fallback_base_scale**\ (\ )

The fallback base scale factor of every :ref:`Control<class_Control>` node and :ref:`Theme<class_Theme>` resource. Used when no other value is available to the control.

See also :ref:`Theme.default_base_scale<class_Theme_property_default_base_scale>`.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_property_fallback_font:

.. rst-class:: classref-property

:ref:`Font<class_Font>` **fallback_font** :ref:`ðŸ”—<class_ThemeDB_property_fallback_font>`

.. rst-class:: classref-property-setget

- |void| **set_fallback_font**\ (\ value\: :ref:`Font<class_Font>`\ )
- :ref:`Font<class_Font>` **get_fallback_font**\ (\ )

The fallback font of every :ref:`Control<class_Control>` node and :ref:`Theme<class_Theme>` resource. Used when no other value is available to the control.

See also :ref:`Theme.default_font<class_Theme_property_default_font>`.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_property_fallback_font_size:

.. rst-class:: classref-property

:ref:`int<class_int>` **fallback_font_size** = ``16`` :ref:`ðŸ”—<class_ThemeDB_property_fallback_font_size>`

.. rst-class:: classref-property-setget

- |void| **set_fallback_font_size**\ (\ value\: :ref:`int<class_int>`\ )
- :ref:`int<class_int>` **get_fallback_font_size**\ (\ )

The fallback font size of every :ref:`Control<class_Control>` node and :ref:`Theme<class_Theme>` resource. Used when no other value is available to the control.

See also :ref:`Theme.default_font_size<class_Theme_property_default_font_size>`.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_property_fallback_icon:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **fallback_icon** :ref:`ðŸ”—<class_ThemeDB_property_fallback_icon>`

.. rst-class:: classref-property-setget

- |void| **set_fallback_icon**\ (\ value\: :ref:`Texture2D<class_Texture2D>`\ )
- :ref:`Texture2D<class_Texture2D>` **get_fallback_icon**\ (\ )

The fallback icon of every :ref:`Control<class_Control>` node and :ref:`Theme<class_Theme>` resource. Used when no other value is available to the control.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_property_fallback_stylebox:

.. rst-class:: classref-property

:ref:`StyleBox<class_StyleBox>` **fallback_stylebox** :ref:`ðŸ”—<class_ThemeDB_property_fallback_stylebox>`

.. rst-class:: classref-property-setget

- |void| **set_fallback_stylebox**\ (\ value\: :ref:`StyleBox<class_StyleBox>`\ )
- :ref:`StyleBox<class_StyleBox>` **get_fallback_stylebox**\ (\ )

The fallback stylebox of every :ref:`Control<class_Control>` node and :ref:`Theme<class_Theme>` resource. Used when no other value is available to the control.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_ThemeDB_method_add_user_icon:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **add_user_icon**\ (\ icon_name\: :ref:`String<class_String>`, icon_source\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_ThemeDB_method_add_user_icon>`

Add an Icon to the default theme, which will make it change colors and scale when the default theme is changed from :ref:`ProjectSettings<class_ProjectSettings>`.

\ ``icon_source`` should be a valid SVG :ref:`String<class_String>`.

In SVG source "red" and "#0f0" are replaced with font and accent colors when they are changed from :ref:`ProjectSettings<class_ProjectSettings>`.

\ **Note:** Editor plugins need to remove their user icon(s) when unloaded.

::

    func _enter_tree():
        var source = FileAccess.get_file_as_string("res://icon.svg")
        ThemeDB.add_user_icon("my_icon", source)
    
    func _exit_tree():
        ThemeDB.remove_user_icon("my_icon")

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_freeze_default_theme:

.. rst-class:: classref-method

|void| **freeze_default_theme**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_method_freeze_default_theme>`

Prevents the default theme from emitting changed. This prevents Nodes using the theme from being updated until :ref:`unfreeze_default_theme()<class_ThemeDB_method_unfreeze_default_theme>` is called.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_get_default_theme:

.. rst-class:: classref-method

:ref:`Theme<class_Theme>` **get_default_theme**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_method_get_default_theme>`

Returns a reference to the default engine :ref:`Theme<class_Theme>`. This theme resource is responsible for the out-of-the-box look of :ref:`Control<class_Control>` nodes and can be customized from :ref:`ProjectSettings<class_ProjectSettings>`.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_get_icon:

.. rst-class:: classref-method

:ref:`ImageTexture<class_ImageTexture>` **get_icon**\ (\ icon_name\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_ThemeDB_method_get_icon>`

Returns an internal icon from the fallback theme, internal theme icons are the default icons that comes with Blazium.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_get_icon_list:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_icon_list**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_method_get_icon_list>`

Returns a list for all the icon names that are used internally for the default theme.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_get_project_theme:

.. rst-class:: classref-method

:ref:`Theme<class_Theme>` **get_project_theme**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_method_get_project_theme>`

Returns a reference to the custom project :ref:`Theme<class_Theme>`. This theme resources allows to override the default engine theme for every control node in the project.

To set the project theme, see :ref:`ProjectSettings.gui/theme/custom<class_ProjectSettings_property_gui/theme/custom>`.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_get_user_icon:

.. rst-class:: classref-method

:ref:`ImageTexture<class_ImageTexture>` **get_user_icon**\ (\ icon_name\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_ThemeDB_method_get_user_icon>`

Returns a user icon from the default theme.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_get_user_icon_list:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_user_icon_list**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_method_get_user_icon_list>`

Returns a list for all the user icon names.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_has_icon:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_icon**\ (\ icon_name\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_ThemeDB_method_has_icon>`

Returns whether the default theme has an internal icon with ``icon_name``.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_has_user_icon:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_user_icon**\ (\ icon_name\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_ThemeDB_method_has_user_icon>`

Returns whether the default theme has a user icon with ``icon_name``.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_is_default_theme_frozen:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_default_theme_frozen**\ (\ ) |const| :ref:`ðŸ”—<class_ThemeDB_method_is_default_theme_frozen>`

Returns whether the default theme is frozen.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_remove_user_icon:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **remove_user_icon**\ (\ icon_name\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_ThemeDB_method_remove_user_icon>`

Removes a user icon that was previously added to the default theme.

.. rst-class:: classref-item-separator

----

.. _class_ThemeDB_method_unfreeze_default_theme:

.. rst-class:: classref-method

|void| **unfreeze_default_theme**\ (\ ) :ref:`ðŸ”—<class_ThemeDB_method_unfreeze_default_theme>`

Emits :ref:`Resource.changed<class_Resource_signal_changed>` if the default theme was already frozen. Also check :ref:`freeze_default_theme()<class_ThemeDB_method_freeze_default_theme>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
