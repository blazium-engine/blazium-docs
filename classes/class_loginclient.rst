:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/blazium-engine/blazium/tree/4.3/doc/tools/make_rst.py.
.. XML source: https://github.com/blazium-engine/blazium/tree/4.3/modules/blazium_sdk/doc_classes/LoginClient.xml.

.. _class_LoginClient:

LoginClient
===========

**Inherits:** :ref:`BlaziumClient<class_BlaziumClient>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Node for connecting to the Blazium Login service. Offers authentication mechanism.

.. rst-class:: classref-introduction-group

Description
-----------

The **LoginClient** node provides an interface for connecting to the Blazium Login service. There is a free instance hosted on the `blazium.app <https://blazium.app>`__ domain that is used by default.

The authentication flow is as follows:

1. Listen to all the signals you are interested in.

2. Connect to the server using the :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` method.

3. Then you can request login info using the :ref:`request_login_info()<class_LoginClient_method_request_login_info>` method.

4. Open the resulting login url received after awaiting on the :ref:`LoginURLResponse.finished<class_LoginURLResponse_signal_finished>` signal.

5. Obtain the jwt from the :ref:`received_jwt<class_LoginClient_signal_received_jwt>` signal.

\ **Note:** Some methods are non blocking and can be awaited in order to get the result.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`     | :ref:`connected<class_LoginClient_property_connected>`                                 | ``false``               |
   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+
   | :ref:`String<class_String>` | :ref:`discord_embedded_app/path<class_LoginClient_property_discord_embedded_app/path>` | ``"blazium/login"``     |
   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+
   | :ref:`String<class_String>` | :ref:`game_id<class_LoginClient_property_game_id>`                                     | ``""``                  |
   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+
   | :ref:`String<class_String>` | :ref:`http_prefix<class_LoginClient_property_http_prefix>`                             | ``"https://"``          |
   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+
   | :ref:`String<class_String>` | :ref:`server_url<class_LoginClient_property_server_url>`                               | ``"login.blazium.app"`` |
   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+
   | :ref:`String<class_String>` | :ref:`websocket_prefix<class_LoginClient_property_websocket_prefix>`                   | ``"wss://"``            |
   +-----------------------------+----------------------------------------------------------------------------------------+-------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`LoginConnectResponse<class_LoginConnectResponse>`           | :ref:`connect_to_server<class_LoginClient_method_connect_to_server>`\ (\ )                                                                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                                                            | :ref:`disconnect_from_server<class_LoginClient_method_disconnect_from_server>`\ (\ )                                                                                                                  |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`LoginRefreshTokenResponse<class_LoginRefreshTokenResponse>` | :ref:`refresh_jwt_token<class_LoginClient_method_refresh_jwt_token>`\ (\ refresh_token\: :ref:`String<class_String>`\ )                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`LoginAccessTokenResponse<class_LoginAccessTokenResponse>`   | :ref:`request_access_token<class_LoginClient_method_request_access_token>`\ (\ login_type\: :ref:`String<class_String>`, auth_id\: :ref:`String<class_String>`, code\: :ref:`String<class_String>`\ ) |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`LoginIDResponse<class_LoginIDResponse>`                     | :ref:`request_auth_id<class_LoginClient_method_request_auth_id>`\ (\ login_type\: :ref:`String<class_String>`\ )                                                                                      |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`LoginURLResponse<class_LoginURLResponse>`                   | :ref:`request_login_info<class_LoginClient_method_request_login_info>`\ (\ login_type\: :ref:`String<class_String>`\ )                                                                                |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`LoginVerifyTokenResponse<class_LoginVerifyTokenResponse>`   | :ref:`verify_jwt_token<class_LoginClient_method_verify_jwt_token>`\ (\ jwt_token\: :ref:`String<class_String>`\ )                                                                                     |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_LoginClient_signal_connected_to_server:

.. rst-class:: classref-signal

**connected_to_server**\ (\ ) :ref:`ðŸ”—<class_LoginClient_signal_connected_to_server>`

Signal emitted when the client connects to the server.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_signal_disconnected_from_server:

.. rst-class:: classref-signal

**disconnected_from_server**\ (\ reason\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_signal_disconnected_from_server>`

Signal emitted when the client disconnects from the server.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_signal_log_updated:

.. rst-class:: classref-signal

**log_updated**\ (\ command\: :ref:`String<class_String>`, logs\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_signal_log_updated>`

Signals a log from a command.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_signal_received_jwt:

.. rst-class:: classref-signal

**received_jwt**\ (\ jwt\: :ref:`String<class_String>`, type\: :ref:`String<class_String>`, access_token\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_signal_received_jwt>`

Signal emitted when a JWT is received.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_LoginClient_property_connected:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **connected** = ``false`` :ref:`ðŸ”—<class_LoginClient_property_connected>`

.. rst-class:: classref-property-setget

- :ref:`bool<class_bool>` **get_connected**\ (\ )

Client connected state.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_property_discord_embedded_app/path:

.. rst-class:: classref-property

:ref:`String<class_String>` **discord_embedded_app/path** = ``"blazium/login"`` :ref:`ðŸ”—<class_LoginClient_property_discord_embedded_app/path>`

.. rst-class:: classref-property-setget

- |void| **set_override_discord_path**\ (\ value\: :ref:`String<class_String>`\ )
- :ref:`String<class_String>` **get_override_discord_path**\ (\ )

Set to what path this client should use when connecting to the discord embedded app.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_property_game_id:

.. rst-class:: classref-property

:ref:`String<class_String>` **game_id** = ``""`` :ref:`ðŸ”—<class_LoginClient_property_game_id>`

.. rst-class:: classref-property-setget

- |void| **set_game_id**\ (\ value\: :ref:`String<class_String>`\ )
- :ref:`String<class_String>` **get_game_id**\ (\ )

Set what game id this client should use when connecting to the server. If this is missing connection will error.

Can only contain alphanumeric characters.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_property_http_prefix:

.. rst-class:: classref-property

:ref:`String<class_String>` **http_prefix** = ``"https://"`` :ref:`ðŸ”—<class_LoginClient_property_http_prefix>`

.. rst-class:: classref-property-setget

- |void| **set_http_prefix**\ (\ value\: :ref:`String<class_String>`\ )
- :ref:`String<class_String>` **get_http_prefix**\ (\ )

The http prefix that will be added to the url. If you want to use http instead of https, set it there.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_property_server_url:

.. rst-class:: classref-property

:ref:`String<class_String>` **server_url** = ``"login.blazium.app"`` :ref:`ðŸ”—<class_LoginClient_property_server_url>`

.. rst-class:: classref-property-setget

- |void| **set_server_url**\ (\ value\: :ref:`String<class_String>`\ )
- :ref:`String<class_String>` **get_server_url**\ (\ )

Set to what url this client should connect to.

For discord embedded app environment, replaces the url with `client_id.discordsays.com/.proxy/blazium/login/connect <wss://client_id.discordsays.com/.proxy/blazium/login/connect>`__ if left default, where client_id is the client id from the discord embedded app url (automatically detected).

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_property_websocket_prefix:

.. rst-class:: classref-property

:ref:`String<class_String>` **websocket_prefix** = ``"wss://"`` :ref:`ðŸ”—<class_LoginClient_property_websocket_prefix>`

.. rst-class:: classref-property-setget

- |void| **set_websocket_prefix**\ (\ value\: :ref:`String<class_String>`\ )
- :ref:`String<class_String>` **get_websocket_prefix**\ (\ )

The http prefix that will be added to the url. If you want to use ws instead of wss, set it there.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_LoginClient_method_connect_to_server:

.. rst-class:: classref-method

:ref:`LoginConnectResponse<class_LoginConnectResponse>` **connect_to_server**\ (\ ) :ref:`ðŸ”—<class_LoginClient_method_connect_to_server>`

Connects to the server specified in :ref:`server_url<class_LoginClient_property_server_url>` using the game id specified in :ref:`game_id<class_LoginClient_property_game_id>`. Must be done before requesting login info.

Generates :ref:`connected_to_server<class_LoginClient_signal_connected_to_server>` when connected.

Returns a :ref:`LoginConnectResponse<class_LoginConnectResponse>` object that has a :ref:`LoginConnectResponse.finished<class_LoginConnectResponse_signal_finished>` signal that is emitted when finished.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_method_disconnect_from_server:

.. rst-class:: classref-method

|void| **disconnect_from_server**\ (\ ) :ref:`ðŸ”—<class_LoginClient_method_disconnect_from_server>`

Disconnect from the server.

Needs :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` to be called first.

Generates :ref:`disconnected_from_server<class_LoginClient_signal_disconnected_from_server>` when disconnected.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_method_refresh_jwt_token:

.. rst-class:: classref-method

:ref:`LoginRefreshTokenResponse<class_LoginRefreshTokenResponse>` **refresh_jwt_token**\ (\ refresh_token\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_method_refresh_jwt_token>`

Refresh the jwt token using the refresh token.

Needs :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` to be called first.

Returns a :ref:`LoginRefreshTokenResponse<class_LoginRefreshTokenResponse>` object that has a :ref:`LoginRefreshTokenResponse.finished<class_LoginRefreshTokenResponse_signal_finished>` signal that is emitted when finished.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_method_request_access_token:

.. rst-class:: classref-method

:ref:`LoginAccessTokenResponse<class_LoginAccessTokenResponse>` **request_access_token**\ (\ login_type\: :ref:`String<class_String>`, auth_id\: :ref:`String<class_String>`, code\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_method_request_access_token>`

Request login auth id using the login type specified, auth_id and access code.

Needs :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` to be called first.

Returns a :ref:`LoginAccessTokenResponse<class_LoginAccessTokenResponse>` object that has a :ref:`LoginAccessTokenResponse.finished<class_LoginAccessTokenResponse_signal_finished>` signal that is emitted when finished.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_method_request_auth_id:

.. rst-class:: classref-method

:ref:`LoginIDResponse<class_LoginIDResponse>` **request_auth_id**\ (\ login_type\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_method_request_auth_id>`

Request login auth id using the login type specified.

Needs :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` to be called first.

Returns a :ref:`LoginIDResponse<class_LoginIDResponse>` object that has a :ref:`LoginIDResponse.finished<class_LoginIDResponse_signal_finished>` signal that is emitted when finished.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_method_request_login_info:

.. rst-class:: classref-method

:ref:`LoginURLResponse<class_LoginURLResponse>` **request_login_info**\ (\ login_type\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_method_request_login_info>`

Request login info using the login type specified.

Needs :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` to be called first.

Returns a :ref:`LoginURLResponse<class_LoginURLResponse>` object that has a :ref:`LoginURLResponse.finished<class_LoginURLResponse_signal_finished>` signal that is emitted when finished.

.. rst-class:: classref-item-separator

----

.. _class_LoginClient_method_verify_jwt_token:

.. rst-class:: classref-method

:ref:`LoginVerifyTokenResponse<class_LoginVerifyTokenResponse>` **verify_jwt_token**\ (\ jwt_token\: :ref:`String<class_String>`\ ) :ref:`ðŸ”—<class_LoginClient_method_verify_jwt_token>`

Verify the jwt token is still valid.

Needs :ref:`connect_to_server()<class_LoginClient_method_connect_to_server>` to be called first.

Returns a :ref:`LoginVerifyTokenResponse<class_LoginVerifyTokenResponse>` object that has a :ref:`LoginVerifyTokenResponse.finished<class_LoginVerifyTokenResponse_signal_finished>` signal that is emitted when finished.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
